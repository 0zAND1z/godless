// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/johnny-morrice/godless (interfaces: RemoteStore)

package mock_godless

import (
	gomock "github.com/golang/mock/gomock"
	godless "github.com/johnny-morrice/godless"
)

// Mock of RemoteStore interface
type MockRemoteStore struct {
	ctrl     *gomock.Controller
	recorder *_MockRemoteStoreRecorder
}

// Recorder for MockRemoteStore (not exported)
type _MockRemoteStoreRecorder struct {
	mock *MockRemoteStore
}

func NewMockRemoteStore(ctrl *gomock.Controller) *MockRemoteStore {
	mock := &MockRemoteStore{ctrl: ctrl}
	mock.recorder = &_MockRemoteStoreRecorder{mock}
	return mock
}

func (_m *MockRemoteStore) EXPECT() *_MockRemoteStoreRecorder {
	return _m.recorder
}

func (_m *MockRemoteStore) AddIndex(_param0 godless.Index) (godless.RemoteStoreAddress, error) {
	ret := _m.ctrl.Call(_m, "AddIndex", _param0)
	ret0, _ := ret[0].(godless.RemoteStoreAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRemoteStoreRecorder) AddIndex(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddIndex", arg0)
}

func (_m *MockRemoteStore) AddNamespace(_param0 godless.RemoteNamespaceRecord) (godless.RemoteStoreAddress, error) {
	ret := _m.ctrl.Call(_m, "AddNamespace", _param0)
	ret0, _ := ret[0].(godless.RemoteStoreAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRemoteStoreRecorder) AddNamespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNamespace", arg0)
}

func (_m *MockRemoteStore) CatIndex(_param0 godless.RemoteStoreAddress) (godless.Index, error) {
	ret := _m.ctrl.Call(_m, "CatIndex", _param0)
	ret0, _ := ret[0].(godless.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRemoteStoreRecorder) CatIndex(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CatIndex", arg0)
}

func (_m *MockRemoteStore) CatNamespace(_param0 godless.RemoteStoreAddress) (godless.RemoteNamespaceRecord, error) {
	ret := _m.ctrl.Call(_m, "CatNamespace", _param0)
	ret0, _ := ret[0].(godless.RemoteNamespaceRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRemoteStoreRecorder) CatNamespace(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CatNamespace", arg0)
}

func (_m *MockRemoteStore) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRemoteStoreRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockRemoteStore) Disconnect() error {
	ret := _m.ctrl.Call(_m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRemoteStoreRecorder) Disconnect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Disconnect")
}

func (_m *MockRemoteStore) PublishAddr(_param0 godless.RemoteStoreAddress, _param1 []godless.RemoteStoreAddress) error {
	ret := _m.ctrl.Call(_m, "PublishAddr", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRemoteStoreRecorder) PublishAddr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublishAddr", arg0, arg1)
}

func (_m *MockRemoteStore) SubscribeAddrStream(_param0 godless.RemoteStoreAddress) (<-chan godless.RemoteStoreAddress, <-chan error) {
	ret := _m.ctrl.Call(_m, "SubscribeAddrStream", _param0)
	ret0, _ := ret[0].(<-chan godless.RemoteStoreAddress)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

func (_mr *_MockRemoteStoreRecorder) SubscribeAddrStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubscribeAddrStream", arg0)
}
