package query

type QueryParser Peg {
	QueryAST
}

Query <- Spacing (Select { p.AddSelect() } / Join { p.AddJoin() }) Spacing !.

TableName <- ( TableNameText / TableNamePlaceholder )
TableNameText <- < Key > { p.SetTableName(buffer[begin:end]) }
TableNamePlaceholder <- < KeyPlaceholder > { p.SetTableNamePlaceholder(begin) }

Join <- 'join' MustSpacing TableName (MustSpacing CryptoKey)* MustSpacing 'rows' MustSpacing JoinRow (Spacing ',' Spacing JoinRow)* Spacing
JoinRow <- { p.AddJoinRow() } '(' Spacing JoinRowKey Spacing ( ',' Spacing JoinPoint Spacing ) * ')'
JoinRowKey <- '@key' Spacing '=' Spacing ( JoinRowKeyValueText / JoinRowKeyValuePlaceholder )
JoinRowKeyValuePlaceholder <- < KeyPlaceholder > { p.SetJoinRowKeyPlaceholder(begin) }
JoinRowKeyValueText <- ('@' ["] < Literal > ["] / < Key > ) { p.SetJoinRowKey(buffer[begin:end]) }
JoinPoint <- ( JoinPointKeyText / JoinPointKeyPlaceholder ) Spacing '=' Spacing ( JoinPointValueText / JoinPointValuePlaceholder )
JoinPointValuePlaceholder <- < LiteralPlaceholder > { p.SetJoinValuePlaceholder(begin) }
JoinPointValueText <- ["] < Literal > ["] { p.SetJoinValue(buffer[begin:end]) }
JoinPointKeyText <- (< Key > / '@' ["] < Literal > ["] ) { p.SetJoinKey(buffer[begin:end]) }
JoinPointKeyPlaceholder <- < KeyPlaceholder > { p.SetJoinKeyPlaceholder(begin) }

Select <- 'select' MustSpacing TableName (MustSpacing WherePart)*
WherePart <- (Where / Limit / CryptoKey)
Limit <- 'limit' MustSpacing ( LimitText / LimitPlaceholder)
LimitText <- < PositiveInteger > { p.SetLimit(buffer[begin:end])}
LimitPlaceholder <- < LiteralPlaceholder > { p.SetLimitPlaceholder(begin) }

CryptoKey <- 'signed' MustSpacing '"' < Key > '"' { p.AddCryptoKey(buffer[begin:end]) }

Where <- 'where' MustSpacing WhereClause
WhereClause <- { p.PushWhere() } ( AndClause / OrClause / PredicateClause ) { p.PopWhere() }
AndClause <- 'and' { p.SetWhereCommand("and") } Spacing '(' Spacing WhereClause Spacing (',' Spacing WhereClause Spacing )* ')'
OrClause <- 'or' { p.SetWhereCommand("or") } Spacing '(' Spacing WhereClause Spacing (',' Spacing WhereClause Spacing)* ')'
PredicateClause <- { p.InitPredicate() } Predicate Spacing '(' Spacing PredicateValue (',' Spacing PredicateValue Spacing)* ')'
Predicate <- < Key > { p.SetPredicateCommand(buffer[begin:end]) }
PredicateValue <- (PredicateRowKey / PredicateKey / PredicateLiteral)
PredicateRowKey <- '@key' { p.UsePredicateRowKey() }
PredicateKey <- ( PredicateKeyText / PredicateKeyLiteral )
PredicateKeyText <- (< Key > / '@' ["] < Literal > ["] ) { p.AddPredicateKey(buffer[begin:end]) }
PredicateKeyLiteral <- < KeyPlaceholder > { p.AddPredicateKeyPlaceholder(begin) }
PredicateLiteral <- ( PredicateLiteralText / PredicateLiteralPlaceholder)
PredicateLiteralText <- ["] < Literal > ["] { p.AddPredicateLiteral(buffer[begin:end])}
PredicateLiteralPlaceholder <- < LiteralPlaceholder > { p.AddPredicateLiteralPlaceholder(begin) }

KeyPlaceholder <- '??'
LiteralPlaceholder <- '?'
Literal <- (Escape / [^"])*
PositiveInteger <- [1-9] [0-9]*
Key <- ( [a-zA-Z0-9_] / '.' / '+' / '-' )+
Escape <- '\\' ["\\abfnrtv]
MustSpacing <- ( ' ' / '\t' / '\n' )+
Spacing <- ( ' ' / '\t' / '\n' )*
