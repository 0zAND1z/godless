package godless

type QueryParser Peg {
	QueryAST
}

Query <- Spacing (Select { p.AddSelect() } / Join { p.AddJoin() }) !.

Join <- 'join' MustSpacing JoinKey MustSpacing 'rows' MustSpacing JoinRow (Spacing ',' Spacing JoinRow)* Spacing
JoinKey <- < Key > { p.SetTableName(buffer[begin:end]) }
JoinRow <- { p.AddJoinRow() } '(' Spacing KeyJoin Spacing ( ',' Spacing ValueJoin Spacing ) * ')'
KeyJoin <- '@key' Spacing '=' Spacing ('@' ['] < Literal > ['] / < Key > ) { p.SetJoinRowKey(buffer[begin:end]) }
ValueJoin <- (< Key > / '@' ['] < Literal > ['] ) { p.SetJoinKey(buffer[begin:end]) } Spacing '=' Spacing ['] < Literal > ['] { p.SetJoinValue(buffer[begin:end]) }

Select <- 'select' MustSpacing SelectKey MustSpacing (Where MustSpacing)? Limit
SelectKey <- < Key > { p.SetTableName(buffer[begin:end]) }

Limit <- 'limit' MustSpacing < PositiveInteger > { p.SetLimit(buffer[begin:end])}

Where <- 'where' MustSpacing WhereClause
WhereClause <- { p.PushWhere() } ( AndClause / OrClause / PredicateClause ) { p.PopWhere() }
AndClause <- 'and' { p.SetWhereCommand("and") } Spacing '(' Spacing WhereClause Spacing (',' Spacing WhereClause Spacing )* ')'
OrClause <- 'or' { p.SetWhereCommand("or") } Spacing '(' Spacing WhereClause Spacing (',' Spacing WhereClause Spacing)* ')'
PredicateClause <- { p.InitPredicate() } Predicate Spacing '(' Spacing PredicateValue (',' Spacing PredicateValue Spacing)* ')'
Predicate <- < ('str_eq' / 'str_neq') > { p.SetPredicateCommand(buffer[begin:end]) }
PredicateValue <- (PredicateRowKey / PredicateKey / PredicateLiteralValue)
PredicateRowKey <- '@key' { p.UsePredicateRowKey() }
PredicateKey <- (< Key > / '@' ['] < Literal > ['] ) { p.AddPredicateKey(buffer[begin:end]) }
PredicateLiteralValue <- ['] < Literal > ['] { p.AddPredicateLiteral(buffer[begin:end])}

Literal <- (Escape / [^'])*
PositiveInteger <- [1-9] [0-9]*
Key <- (Escape / [a-zA-Z0-9])+
Escape <- '\\' ['\"?\\abfnrtv]
MustSpacing <- ( ' ' / '\t' / '\n' )+
Spacing <- ( ' ' / '\t' / '\n' )*
